/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package foundation.fitness.portal.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import foundation.fitness.portal.service.model.FitnessRecord;
import foundation.fitness.portal.service.model.FitnessRecordModel;
import foundation.fitness.portal.service.model.FitnessRecordSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the FitnessRecord service. Represents a row in the &quot;NFF_FitnessRecord&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link FitnessRecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FitnessRecordImpl}.
 * </p>
 *
 * @author Sten Martinez
 * @see FitnessRecordImpl
 * @see FitnessRecord
 * @see FitnessRecordModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FitnessRecordModelImpl extends BaseModelImpl<FitnessRecord>
	implements FitnessRecordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fitness record model instance should use the {@link FitnessRecord} interface instead.
	 */
	public static final String TABLE_NAME = "NFF_FitnessRecord";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "recordId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "teacherUserId", Types.BIGINT },
			{ "className", Types.VARCHAR },
			{ "studentFirstName", Types.VARCHAR },
			{ "studentLastName", Types.VARCHAR },
			{ "studentGender", Types.VARCHAR },
			{ "studentId", Types.VARCHAR },
			{ "studentGrade", Types.VARCHAR },
			{ "studentAge", Types.INTEGER },
			{ "testDate", Types.TIMESTAMP },
			{ "heightFeet", Types.INTEGER },
			{ "heightInches", Types.INTEGER },
			{ "weight", Types.INTEGER },
			{ "bmi", Types.INTEGER },
			{ "triSkinfold", Types.INTEGER },
			{ "calfSkinfold", Types.INTEGER },
			{ "percentBodyFatCalc", Types.FLOAT },
			{ "percentBodyFatEntered", Types.FLOAT },
			{ "twentyMPacerLaps", Types.INTEGER },
			{ "fifteenMPacerLaps", Types.INTEGER },
			{ "pacerVo2Max", Types.FLOAT },
			{ "mileRunMinutes", Types.INTEGER },
			{ "mileRunSeconds", Types.INTEGER },
			{ "mileRunVo2Max", Types.FLOAT },
			{ "walkTestMinutes", Types.INTEGER },
			{ "walkTestSeconds", Types.INTEGER },
			{ "walkTestHrBpm", Types.INTEGER },
			{ "walkTestVo2Max", Types.FLOAT },
			{ "curlUps", Types.INTEGER },
			{ "trunkLiftInches", Types.INTEGER },
			{ "pushups", Types.INTEGER },
			{ "modPullUps", Types.INTEGER },
			{ "flexArmHangSeconds", Types.INTEGER },
			{ "sitReachLInches", Types.INTEGER },
			{ "sitReachRInches", Types.INTEGER },
			{ "shoulderStretchL", Types.BOOLEAN },
			{ "shoulderStretchR", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("teacherUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentFirstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentLastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentGender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentGrade", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("studentAge", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("testDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("heightFeet", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("heightInches", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("weight", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("bmi", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("triSkinfold", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("calfSkinfold", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("percentBodyFatCalc", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("percentBodyFatEntered", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("twentyMPacerLaps", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("fifteenMPacerLaps", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("pacerVo2Max", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("mileRunMinutes", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("mileRunSeconds", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("mileRunVo2Max", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("walkTestMinutes", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("walkTestSeconds", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("walkTestHrBpm", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("walkTestVo2Max", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("curlUps", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("trunkLiftInches", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("pushups", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("modPullUps", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("flexArmHangSeconds", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sitReachLInches", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("sitReachRInches", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("shoulderStretchL", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("shoulderStretchR", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table NFF_FitnessRecord (uuid_ VARCHAR(75) null,recordId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,teacherUserId LONG,className VARCHAR(75) null,studentFirstName VARCHAR(75) null,studentLastName VARCHAR(75) null,studentGender VARCHAR(75) null,studentId VARCHAR(75) null,studentGrade VARCHAR(75) null,studentAge INTEGER,testDate DATE null,heightFeet INTEGER,heightInches INTEGER,weight INTEGER,bmi INTEGER,triSkinfold INTEGER,calfSkinfold INTEGER,percentBodyFatCalc DOUBLE,percentBodyFatEntered DOUBLE,twentyMPacerLaps INTEGER,fifteenMPacerLaps INTEGER,pacerVo2Max DOUBLE,mileRunMinutes INTEGER,mileRunSeconds INTEGER,mileRunVo2Max DOUBLE,walkTestMinutes INTEGER,walkTestSeconds INTEGER,walkTestHrBpm INTEGER,walkTestVo2Max DOUBLE,curlUps INTEGER,trunkLiftInches INTEGER,pushups INTEGER,modPullUps INTEGER,flexArmHangSeconds INTEGER,sitReachLInches INTEGER,sitReachRInches INTEGER,shoulderStretchL BOOLEAN,shoulderStretchR BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table NFF_FitnessRecord";
	public static final String ORDER_BY_JPQL = " ORDER BY fitnessRecord.recordId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY NFF_FitnessRecord.recordId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(foundation.fitness.data.entry.portlet.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.foundation.fitness.portal.service.model.FitnessRecord"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(foundation.fitness.data.entry.portlet.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.foundation.fitness.portal.service.model.FitnessRecord"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(foundation.fitness.data.entry.portlet.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.foundation.fitness.portal.service.model.FitnessRecord"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long RECORDID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static FitnessRecord toModel(FitnessRecordSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		FitnessRecord model = new FitnessRecordImpl();

		model.setUuid(soapModel.getUuid());
		model.setRecordId(soapModel.getRecordId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTeacherUserId(soapModel.getTeacherUserId());
		model.setClassName(soapModel.getClassName());
		model.setStudentFirstName(soapModel.getStudentFirstName());
		model.setStudentLastName(soapModel.getStudentLastName());
		model.setStudentGender(soapModel.getStudentGender());
		model.setStudentId(soapModel.getStudentId());
		model.setStudentGrade(soapModel.getStudentGrade());
		model.setStudentAge(soapModel.getStudentAge());
		model.setTestDate(soapModel.getTestDate());
		model.setHeightFeet(soapModel.getHeightFeet());
		model.setHeightInches(soapModel.getHeightInches());
		model.setWeight(soapModel.getWeight());
		model.setBmi(soapModel.getBmi());
		model.setTriSkinfold(soapModel.getTriSkinfold());
		model.setCalfSkinfold(soapModel.getCalfSkinfold());
		model.setPercentBodyFatCalc(soapModel.getPercentBodyFatCalc());
		model.setPercentBodyFatEntered(soapModel.getPercentBodyFatEntered());
		model.setTwentyMPacerLaps(soapModel.getTwentyMPacerLaps());
		model.setFifteenMPacerLaps(soapModel.getFifteenMPacerLaps());
		model.setPacerVo2Max(soapModel.getPacerVo2Max());
		model.setMileRunMinutes(soapModel.getMileRunMinutes());
		model.setMileRunSeconds(soapModel.getMileRunSeconds());
		model.setMileRunVo2Max(soapModel.getMileRunVo2Max());
		model.setWalkTestMinutes(soapModel.getWalkTestMinutes());
		model.setWalkTestSeconds(soapModel.getWalkTestSeconds());
		model.setWalkTestHrBpm(soapModel.getWalkTestHrBpm());
		model.setWalkTestVo2Max(soapModel.getWalkTestVo2Max());
		model.setCurlUps(soapModel.getCurlUps());
		model.setTrunkLiftInches(soapModel.getTrunkLiftInches());
		model.setPushups(soapModel.getPushups());
		model.setModPullUps(soapModel.getModPullUps());
		model.setFlexArmHangSeconds(soapModel.getFlexArmHangSeconds());
		model.setSitReachLInches(soapModel.getSitReachLInches());
		model.setSitReachRInches(soapModel.getSitReachRInches());
		model.setShoulderStretchL(soapModel.getShoulderStretchL());
		model.setShoulderStretchR(soapModel.getShoulderStretchR());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<FitnessRecord> toModels(FitnessRecordSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<FitnessRecord> models = new ArrayList<FitnessRecord>(soapModels.length);

		for (FitnessRecordSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(foundation.fitness.data.entry.portlet.service.util.ServiceProps.get(
				"lock.expiration.time.foundation.fitness.portal.service.model.FitnessRecord"));

	public FitnessRecordModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recordId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecordId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recordId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FitnessRecord.class;
	}

	@Override
	public String getModelClassName() {
		return FitnessRecord.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("recordId", getRecordId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("teacherUserId", getTeacherUserId());
		attributes.put("className", getClassName());
		attributes.put("studentFirstName", getStudentFirstName());
		attributes.put("studentLastName", getStudentLastName());
		attributes.put("studentGender", getStudentGender());
		attributes.put("studentId", getStudentId());
		attributes.put("studentGrade", getStudentGrade());
		attributes.put("studentAge", getStudentAge());
		attributes.put("testDate", getTestDate());
		attributes.put("heightFeet", getHeightFeet());
		attributes.put("heightInches", getHeightInches());
		attributes.put("weight", getWeight());
		attributes.put("bmi", getBmi());
		attributes.put("triSkinfold", getTriSkinfold());
		attributes.put("calfSkinfold", getCalfSkinfold());
		attributes.put("percentBodyFatCalc", getPercentBodyFatCalc());
		attributes.put("percentBodyFatEntered", getPercentBodyFatEntered());
		attributes.put("twentyMPacerLaps", getTwentyMPacerLaps());
		attributes.put("fifteenMPacerLaps", getFifteenMPacerLaps());
		attributes.put("pacerVo2Max", getPacerVo2Max());
		attributes.put("mileRunMinutes", getMileRunMinutes());
		attributes.put("mileRunSeconds", getMileRunSeconds());
		attributes.put("mileRunVo2Max", getMileRunVo2Max());
		attributes.put("walkTestMinutes", getWalkTestMinutes());
		attributes.put("walkTestSeconds", getWalkTestSeconds());
		attributes.put("walkTestHrBpm", getWalkTestHrBpm());
		attributes.put("walkTestVo2Max", getWalkTestVo2Max());
		attributes.put("curlUps", getCurlUps());
		attributes.put("trunkLiftInches", getTrunkLiftInches());
		attributes.put("pushups", getPushups());
		attributes.put("modPullUps", getModPullUps());
		attributes.put("flexArmHangSeconds", getFlexArmHangSeconds());
		attributes.put("sitReachLInches", getSitReachLInches());
		attributes.put("sitReachRInches", getSitReachRInches());
		attributes.put("shoulderStretchL", getShoulderStretchL());
		attributes.put("shoulderStretchR", getShoulderStretchR());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long recordId = (Long)attributes.get("recordId");

		if (recordId != null) {
			setRecordId(recordId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long teacherUserId = (Long)attributes.get("teacherUserId");

		if (teacherUserId != null) {
			setTeacherUserId(teacherUserId);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		String studentFirstName = (String)attributes.get("studentFirstName");

		if (studentFirstName != null) {
			setStudentFirstName(studentFirstName);
		}

		String studentLastName = (String)attributes.get("studentLastName");

		if (studentLastName != null) {
			setStudentLastName(studentLastName);
		}

		String studentGender = (String)attributes.get("studentGender");

		if (studentGender != null) {
			setStudentGender(studentGender);
		}

		String studentId = (String)attributes.get("studentId");

		if (studentId != null) {
			setStudentId(studentId);
		}

		String studentGrade = (String)attributes.get("studentGrade");

		if (studentGrade != null) {
			setStudentGrade(studentGrade);
		}

		Integer studentAge = (Integer)attributes.get("studentAge");

		if (studentAge != null) {
			setStudentAge(studentAge);
		}

		Date testDate = (Date)attributes.get("testDate");

		if (testDate != null) {
			setTestDate(testDate);
		}

		Integer heightFeet = (Integer)attributes.get("heightFeet");

		if (heightFeet != null) {
			setHeightFeet(heightFeet);
		}

		Integer heightInches = (Integer)attributes.get("heightInches");

		if (heightInches != null) {
			setHeightInches(heightInches);
		}

		Integer weight = (Integer)attributes.get("weight");

		if (weight != null) {
			setWeight(weight);
		}

		Integer bmi = (Integer)attributes.get("bmi");

		if (bmi != null) {
			setBmi(bmi);
		}

		Integer triSkinfold = (Integer)attributes.get("triSkinfold");

		if (triSkinfold != null) {
			setTriSkinfold(triSkinfold);
		}

		Integer calfSkinfold = (Integer)attributes.get("calfSkinfold");

		if (calfSkinfold != null) {
			setCalfSkinfold(calfSkinfold);
		}

		Float percentBodyFatCalc = (Float)attributes.get("percentBodyFatCalc");

		if (percentBodyFatCalc != null) {
			setPercentBodyFatCalc(percentBodyFatCalc);
		}

		Float percentBodyFatEntered = (Float)attributes.get(
				"percentBodyFatEntered");

		if (percentBodyFatEntered != null) {
			setPercentBodyFatEntered(percentBodyFatEntered);
		}

		Integer twentyMPacerLaps = (Integer)attributes.get("twentyMPacerLaps");

		if (twentyMPacerLaps != null) {
			setTwentyMPacerLaps(twentyMPacerLaps);
		}

		Integer fifteenMPacerLaps = (Integer)attributes.get("fifteenMPacerLaps");

		if (fifteenMPacerLaps != null) {
			setFifteenMPacerLaps(fifteenMPacerLaps);
		}

		Float pacerVo2Max = (Float)attributes.get("pacerVo2Max");

		if (pacerVo2Max != null) {
			setPacerVo2Max(pacerVo2Max);
		}

		Integer mileRunMinutes = (Integer)attributes.get("mileRunMinutes");

		if (mileRunMinutes != null) {
			setMileRunMinutes(mileRunMinutes);
		}

		Integer mileRunSeconds = (Integer)attributes.get("mileRunSeconds");

		if (mileRunSeconds != null) {
			setMileRunSeconds(mileRunSeconds);
		}

		Float mileRunVo2Max = (Float)attributes.get("mileRunVo2Max");

		if (mileRunVo2Max != null) {
			setMileRunVo2Max(mileRunVo2Max);
		}

		Integer walkTestMinutes = (Integer)attributes.get("walkTestMinutes");

		if (walkTestMinutes != null) {
			setWalkTestMinutes(walkTestMinutes);
		}

		Integer walkTestSeconds = (Integer)attributes.get("walkTestSeconds");

		if (walkTestSeconds != null) {
			setWalkTestSeconds(walkTestSeconds);
		}

		Integer walkTestHrBpm = (Integer)attributes.get("walkTestHrBpm");

		if (walkTestHrBpm != null) {
			setWalkTestHrBpm(walkTestHrBpm);
		}

		Float walkTestVo2Max = (Float)attributes.get("walkTestVo2Max");

		if (walkTestVo2Max != null) {
			setWalkTestVo2Max(walkTestVo2Max);
		}

		Integer curlUps = (Integer)attributes.get("curlUps");

		if (curlUps != null) {
			setCurlUps(curlUps);
		}

		Integer trunkLiftInches = (Integer)attributes.get("trunkLiftInches");

		if (trunkLiftInches != null) {
			setTrunkLiftInches(trunkLiftInches);
		}

		Integer pushups = (Integer)attributes.get("pushups");

		if (pushups != null) {
			setPushups(pushups);
		}

		Integer modPullUps = (Integer)attributes.get("modPullUps");

		if (modPullUps != null) {
			setModPullUps(modPullUps);
		}

		Integer flexArmHangSeconds = (Integer)attributes.get(
				"flexArmHangSeconds");

		if (flexArmHangSeconds != null) {
			setFlexArmHangSeconds(flexArmHangSeconds);
		}

		Integer sitReachLInches = (Integer)attributes.get("sitReachLInches");

		if (sitReachLInches != null) {
			setSitReachLInches(sitReachLInches);
		}

		Integer sitReachRInches = (Integer)attributes.get("sitReachRInches");

		if (sitReachRInches != null) {
			setSitReachRInches(sitReachRInches);
		}

		Boolean shoulderStretchL = (Boolean)attributes.get("shoulderStretchL");

		if (shoulderStretchL != null) {
			setShoulderStretchL(shoulderStretchL);
		}

		Boolean shoulderStretchR = (Boolean)attributes.get("shoulderStretchR");

		if (shoulderStretchR != null) {
			setShoulderStretchR(shoulderStretchR);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getRecordId() {
		return _recordId;
	}

	@Override
	public void setRecordId(long recordId) {
		_recordId = recordId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getTeacherUserId() {
		return _teacherUserId;
	}

	@Override
	public void setTeacherUserId(long teacherUserId) {
		_teacherUserId = teacherUserId;
	}

	@Override
	public String getTeacherUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getTeacherUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setTeacherUserUuid(String teacherUserUuid) {
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_className = className;
	}

	@JSON
	@Override
	public String getStudentFirstName() {
		if (_studentFirstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _studentFirstName;
		}
	}

	@Override
	public void setStudentFirstName(String studentFirstName) {
		_studentFirstName = studentFirstName;
	}

	@JSON
	@Override
	public String getStudentLastName() {
		if (_studentLastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _studentLastName;
		}
	}

	@Override
	public void setStudentLastName(String studentLastName) {
		_studentLastName = studentLastName;
	}

	@JSON
	@Override
	public String getStudentGender() {
		if (_studentGender == null) {
			return StringPool.BLANK;
		}
		else {
			return _studentGender;
		}
	}

	@Override
	public void setStudentGender(String studentGender) {
		_studentGender = studentGender;
	}

	@JSON
	@Override
	public String getStudentId() {
		if (_studentId == null) {
			return StringPool.BLANK;
		}
		else {
			return _studentId;
		}
	}

	@Override
	public void setStudentId(String studentId) {
		_studentId = studentId;
	}

	@JSON
	@Override
	public String getStudentGrade() {
		if (_studentGrade == null) {
			return StringPool.BLANK;
		}
		else {
			return _studentGrade;
		}
	}

	@Override
	public void setStudentGrade(String studentGrade) {
		_studentGrade = studentGrade;
	}

	@JSON
	@Override
	public int getStudentAge() {
		return _studentAge;
	}

	@Override
	public void setStudentAge(int studentAge) {
		_studentAge = studentAge;
	}

	@JSON
	@Override
	public Date getTestDate() {
		return _testDate;
	}

	@Override
	public void setTestDate(Date testDate) {
		_testDate = testDate;
	}

	@JSON
	@Override
	public int getHeightFeet() {
		return _heightFeet;
	}

	@Override
	public void setHeightFeet(int heightFeet) {
		_heightFeet = heightFeet;
	}

	@JSON
	@Override
	public int getHeightInches() {
		return _heightInches;
	}

	@Override
	public void setHeightInches(int heightInches) {
		_heightInches = heightInches;
	}

	@JSON
	@Override
	public int getWeight() {
		return _weight;
	}

	@Override
	public void setWeight(int weight) {
		_weight = weight;
	}

	@JSON
	@Override
	public int getBmi() {
		return _bmi;
	}

	@Override
	public void setBmi(int bmi) {
		_bmi = bmi;
	}

	@JSON
	@Override
	public int getTriSkinfold() {
		return _triSkinfold;
	}

	@Override
	public void setTriSkinfold(int triSkinfold) {
		_triSkinfold = triSkinfold;
	}

	@JSON
	@Override
	public int getCalfSkinfold() {
		return _calfSkinfold;
	}

	@Override
	public void setCalfSkinfold(int calfSkinfold) {
		_calfSkinfold = calfSkinfold;
	}

	@JSON
	@Override
	public float getPercentBodyFatCalc() {
		return _percentBodyFatCalc;
	}

	@Override
	public void setPercentBodyFatCalc(float percentBodyFatCalc) {
		_percentBodyFatCalc = percentBodyFatCalc;
	}

	@JSON
	@Override
	public float getPercentBodyFatEntered() {
		return _percentBodyFatEntered;
	}

	@Override
	public void setPercentBodyFatEntered(float percentBodyFatEntered) {
		_percentBodyFatEntered = percentBodyFatEntered;
	}

	@JSON
	@Override
	public int getTwentyMPacerLaps() {
		return _twentyMPacerLaps;
	}

	@Override
	public void setTwentyMPacerLaps(int twentyMPacerLaps) {
		_twentyMPacerLaps = twentyMPacerLaps;
	}

	@JSON
	@Override
	public int getFifteenMPacerLaps() {
		return _fifteenMPacerLaps;
	}

	@Override
	public void setFifteenMPacerLaps(int fifteenMPacerLaps) {
		_fifteenMPacerLaps = fifteenMPacerLaps;
	}

	@JSON
	@Override
	public float getPacerVo2Max() {
		return _pacerVo2Max;
	}

	@Override
	public void setPacerVo2Max(float pacerVo2Max) {
		_pacerVo2Max = pacerVo2Max;
	}

	@JSON
	@Override
	public int getMileRunMinutes() {
		return _mileRunMinutes;
	}

	@Override
	public void setMileRunMinutes(int mileRunMinutes) {
		_mileRunMinutes = mileRunMinutes;
	}

	@JSON
	@Override
	public int getMileRunSeconds() {
		return _mileRunSeconds;
	}

	@Override
	public void setMileRunSeconds(int mileRunSeconds) {
		_mileRunSeconds = mileRunSeconds;
	}

	@JSON
	@Override
	public float getMileRunVo2Max() {
		return _mileRunVo2Max;
	}

	@Override
	public void setMileRunVo2Max(float mileRunVo2Max) {
		_mileRunVo2Max = mileRunVo2Max;
	}

	@JSON
	@Override
	public int getWalkTestMinutes() {
		return _walkTestMinutes;
	}

	@Override
	public void setWalkTestMinutes(int walkTestMinutes) {
		_walkTestMinutes = walkTestMinutes;
	}

	@JSON
	@Override
	public int getWalkTestSeconds() {
		return _walkTestSeconds;
	}

	@Override
	public void setWalkTestSeconds(int walkTestSeconds) {
		_walkTestSeconds = walkTestSeconds;
	}

	@JSON
	@Override
	public int getWalkTestHrBpm() {
		return _walkTestHrBpm;
	}

	@Override
	public void setWalkTestHrBpm(int walkTestHrBpm) {
		_walkTestHrBpm = walkTestHrBpm;
	}

	@JSON
	@Override
	public float getWalkTestVo2Max() {
		return _walkTestVo2Max;
	}

	@Override
	public void setWalkTestVo2Max(float walkTestVo2Max) {
		_walkTestVo2Max = walkTestVo2Max;
	}

	@JSON
	@Override
	public int getCurlUps() {
		return _curlUps;
	}

	@Override
	public void setCurlUps(int curlUps) {
		_curlUps = curlUps;
	}

	@JSON
	@Override
	public int getTrunkLiftInches() {
		return _trunkLiftInches;
	}

	@Override
	public void setTrunkLiftInches(int trunkLiftInches) {
		_trunkLiftInches = trunkLiftInches;
	}

	@JSON
	@Override
	public int getPushups() {
		return _pushups;
	}

	@Override
	public void setPushups(int pushups) {
		_pushups = pushups;
	}

	@JSON
	@Override
	public int getModPullUps() {
		return _modPullUps;
	}

	@Override
	public void setModPullUps(int modPullUps) {
		_modPullUps = modPullUps;
	}

	@JSON
	@Override
	public int getFlexArmHangSeconds() {
		return _flexArmHangSeconds;
	}

	@Override
	public void setFlexArmHangSeconds(int flexArmHangSeconds) {
		_flexArmHangSeconds = flexArmHangSeconds;
	}

	@JSON
	@Override
	public int getSitReachLInches() {
		return _sitReachLInches;
	}

	@Override
	public void setSitReachLInches(int sitReachLInches) {
		_sitReachLInches = sitReachLInches;
	}

	@JSON
	@Override
	public int getSitReachRInches() {
		return _sitReachRInches;
	}

	@Override
	public void setSitReachRInches(int sitReachRInches) {
		_sitReachRInches = sitReachRInches;
	}

	@JSON
	@Override
	public boolean getShoulderStretchL() {
		return _shoulderStretchL;
	}

	@JSON
	@Override
	public boolean isShoulderStretchL() {
		return _shoulderStretchL;
	}

	@Override
	public void setShoulderStretchL(boolean shoulderStretchL) {
		_shoulderStretchL = shoulderStretchL;
	}

	@JSON
	@Override
	public boolean getShoulderStretchR() {
		return _shoulderStretchR;
	}

	@JSON
	@Override
	public boolean isShoulderStretchR() {
		return _shoulderStretchR;
	}

	@Override
	public void setShoulderStretchR(boolean shoulderStretchR) {
		_shoulderStretchR = shoulderStretchR;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				FitnessRecord.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			FitnessRecord.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FitnessRecord toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FitnessRecord)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FitnessRecordImpl fitnessRecordImpl = new FitnessRecordImpl();

		fitnessRecordImpl.setUuid(getUuid());
		fitnessRecordImpl.setRecordId(getRecordId());
		fitnessRecordImpl.setGroupId(getGroupId());
		fitnessRecordImpl.setCompanyId(getCompanyId());
		fitnessRecordImpl.setUserId(getUserId());
		fitnessRecordImpl.setUserName(getUserName());
		fitnessRecordImpl.setCreateDate(getCreateDate());
		fitnessRecordImpl.setModifiedDate(getModifiedDate());
		fitnessRecordImpl.setTeacherUserId(getTeacherUserId());
		fitnessRecordImpl.setClassName(getClassName());
		fitnessRecordImpl.setStudentFirstName(getStudentFirstName());
		fitnessRecordImpl.setStudentLastName(getStudentLastName());
		fitnessRecordImpl.setStudentGender(getStudentGender());
		fitnessRecordImpl.setStudentId(getStudentId());
		fitnessRecordImpl.setStudentGrade(getStudentGrade());
		fitnessRecordImpl.setStudentAge(getStudentAge());
		fitnessRecordImpl.setTestDate(getTestDate());
		fitnessRecordImpl.setHeightFeet(getHeightFeet());
		fitnessRecordImpl.setHeightInches(getHeightInches());
		fitnessRecordImpl.setWeight(getWeight());
		fitnessRecordImpl.setBmi(getBmi());
		fitnessRecordImpl.setTriSkinfold(getTriSkinfold());
		fitnessRecordImpl.setCalfSkinfold(getCalfSkinfold());
		fitnessRecordImpl.setPercentBodyFatCalc(getPercentBodyFatCalc());
		fitnessRecordImpl.setPercentBodyFatEntered(getPercentBodyFatEntered());
		fitnessRecordImpl.setTwentyMPacerLaps(getTwentyMPacerLaps());
		fitnessRecordImpl.setFifteenMPacerLaps(getFifteenMPacerLaps());
		fitnessRecordImpl.setPacerVo2Max(getPacerVo2Max());
		fitnessRecordImpl.setMileRunMinutes(getMileRunMinutes());
		fitnessRecordImpl.setMileRunSeconds(getMileRunSeconds());
		fitnessRecordImpl.setMileRunVo2Max(getMileRunVo2Max());
		fitnessRecordImpl.setWalkTestMinutes(getWalkTestMinutes());
		fitnessRecordImpl.setWalkTestSeconds(getWalkTestSeconds());
		fitnessRecordImpl.setWalkTestHrBpm(getWalkTestHrBpm());
		fitnessRecordImpl.setWalkTestVo2Max(getWalkTestVo2Max());
		fitnessRecordImpl.setCurlUps(getCurlUps());
		fitnessRecordImpl.setTrunkLiftInches(getTrunkLiftInches());
		fitnessRecordImpl.setPushups(getPushups());
		fitnessRecordImpl.setModPullUps(getModPullUps());
		fitnessRecordImpl.setFlexArmHangSeconds(getFlexArmHangSeconds());
		fitnessRecordImpl.setSitReachLInches(getSitReachLInches());
		fitnessRecordImpl.setSitReachRInches(getSitReachRInches());
		fitnessRecordImpl.setShoulderStretchL(getShoulderStretchL());
		fitnessRecordImpl.setShoulderStretchR(getShoulderStretchR());

		fitnessRecordImpl.resetOriginalValues();

		return fitnessRecordImpl;
	}

	@Override
	public int compareTo(FitnessRecord fitnessRecord) {
		long primaryKey = fitnessRecord.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FitnessRecord)) {
			return false;
		}

		FitnessRecord fitnessRecord = (FitnessRecord)obj;

		long primaryKey = fitnessRecord.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FitnessRecordModelImpl fitnessRecordModelImpl = this;

		fitnessRecordModelImpl._originalUuid = fitnessRecordModelImpl._uuid;

		fitnessRecordModelImpl._originalGroupId = fitnessRecordModelImpl._groupId;

		fitnessRecordModelImpl._setOriginalGroupId = false;

		fitnessRecordModelImpl._originalCompanyId = fitnessRecordModelImpl._companyId;

		fitnessRecordModelImpl._setOriginalCompanyId = false;

		fitnessRecordModelImpl._setModifiedDate = false;

		fitnessRecordModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FitnessRecord> toCacheModel() {
		FitnessRecordCacheModel fitnessRecordCacheModel = new FitnessRecordCacheModel();

		fitnessRecordCacheModel.uuid = getUuid();

		String uuid = fitnessRecordCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fitnessRecordCacheModel.uuid = null;
		}

		fitnessRecordCacheModel.recordId = getRecordId();

		fitnessRecordCacheModel.groupId = getGroupId();

		fitnessRecordCacheModel.companyId = getCompanyId();

		fitnessRecordCacheModel.userId = getUserId();

		fitnessRecordCacheModel.userName = getUserName();

		String userName = fitnessRecordCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			fitnessRecordCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			fitnessRecordCacheModel.createDate = createDate.getTime();
		}
		else {
			fitnessRecordCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fitnessRecordCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fitnessRecordCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fitnessRecordCacheModel.teacherUserId = getTeacherUserId();

		fitnessRecordCacheModel.className = getClassName();

		String className = fitnessRecordCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			fitnessRecordCacheModel.className = null;
		}

		fitnessRecordCacheModel.studentFirstName = getStudentFirstName();

		String studentFirstName = fitnessRecordCacheModel.studentFirstName;

		if ((studentFirstName != null) && (studentFirstName.length() == 0)) {
			fitnessRecordCacheModel.studentFirstName = null;
		}

		fitnessRecordCacheModel.studentLastName = getStudentLastName();

		String studentLastName = fitnessRecordCacheModel.studentLastName;

		if ((studentLastName != null) && (studentLastName.length() == 0)) {
			fitnessRecordCacheModel.studentLastName = null;
		}

		fitnessRecordCacheModel.studentGender = getStudentGender();

		String studentGender = fitnessRecordCacheModel.studentGender;

		if ((studentGender != null) && (studentGender.length() == 0)) {
			fitnessRecordCacheModel.studentGender = null;
		}

		fitnessRecordCacheModel.studentId = getStudentId();

		String studentId = fitnessRecordCacheModel.studentId;

		if ((studentId != null) && (studentId.length() == 0)) {
			fitnessRecordCacheModel.studentId = null;
		}

		fitnessRecordCacheModel.studentGrade = getStudentGrade();

		String studentGrade = fitnessRecordCacheModel.studentGrade;

		if ((studentGrade != null) && (studentGrade.length() == 0)) {
			fitnessRecordCacheModel.studentGrade = null;
		}

		fitnessRecordCacheModel.studentAge = getStudentAge();

		Date testDate = getTestDate();

		if (testDate != null) {
			fitnessRecordCacheModel.testDate = testDate.getTime();
		}
		else {
			fitnessRecordCacheModel.testDate = Long.MIN_VALUE;
		}

		fitnessRecordCacheModel.heightFeet = getHeightFeet();

		fitnessRecordCacheModel.heightInches = getHeightInches();

		fitnessRecordCacheModel.weight = getWeight();

		fitnessRecordCacheModel.bmi = getBmi();

		fitnessRecordCacheModel.triSkinfold = getTriSkinfold();

		fitnessRecordCacheModel.calfSkinfold = getCalfSkinfold();

		fitnessRecordCacheModel.percentBodyFatCalc = getPercentBodyFatCalc();

		fitnessRecordCacheModel.percentBodyFatEntered = getPercentBodyFatEntered();

		fitnessRecordCacheModel.twentyMPacerLaps = getTwentyMPacerLaps();

		fitnessRecordCacheModel.fifteenMPacerLaps = getFifteenMPacerLaps();

		fitnessRecordCacheModel.pacerVo2Max = getPacerVo2Max();

		fitnessRecordCacheModel.mileRunMinutes = getMileRunMinutes();

		fitnessRecordCacheModel.mileRunSeconds = getMileRunSeconds();

		fitnessRecordCacheModel.mileRunVo2Max = getMileRunVo2Max();

		fitnessRecordCacheModel.walkTestMinutes = getWalkTestMinutes();

		fitnessRecordCacheModel.walkTestSeconds = getWalkTestSeconds();

		fitnessRecordCacheModel.walkTestHrBpm = getWalkTestHrBpm();

		fitnessRecordCacheModel.walkTestVo2Max = getWalkTestVo2Max();

		fitnessRecordCacheModel.curlUps = getCurlUps();

		fitnessRecordCacheModel.trunkLiftInches = getTrunkLiftInches();

		fitnessRecordCacheModel.pushups = getPushups();

		fitnessRecordCacheModel.modPullUps = getModPullUps();

		fitnessRecordCacheModel.flexArmHangSeconds = getFlexArmHangSeconds();

		fitnessRecordCacheModel.sitReachLInches = getSitReachLInches();

		fitnessRecordCacheModel.sitReachRInches = getSitReachRInches();

		fitnessRecordCacheModel.shoulderStretchL = getShoulderStretchL();

		fitnessRecordCacheModel.shoulderStretchR = getShoulderStretchR();

		return fitnessRecordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(89);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", recordId=");
		sb.append(getRecordId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", teacherUserId=");
		sb.append(getTeacherUserId());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", studentFirstName=");
		sb.append(getStudentFirstName());
		sb.append(", studentLastName=");
		sb.append(getStudentLastName());
		sb.append(", studentGender=");
		sb.append(getStudentGender());
		sb.append(", studentId=");
		sb.append(getStudentId());
		sb.append(", studentGrade=");
		sb.append(getStudentGrade());
		sb.append(", studentAge=");
		sb.append(getStudentAge());
		sb.append(", testDate=");
		sb.append(getTestDate());
		sb.append(", heightFeet=");
		sb.append(getHeightFeet());
		sb.append(", heightInches=");
		sb.append(getHeightInches());
		sb.append(", weight=");
		sb.append(getWeight());
		sb.append(", bmi=");
		sb.append(getBmi());
		sb.append(", triSkinfold=");
		sb.append(getTriSkinfold());
		sb.append(", calfSkinfold=");
		sb.append(getCalfSkinfold());
		sb.append(", percentBodyFatCalc=");
		sb.append(getPercentBodyFatCalc());
		sb.append(", percentBodyFatEntered=");
		sb.append(getPercentBodyFatEntered());
		sb.append(", twentyMPacerLaps=");
		sb.append(getTwentyMPacerLaps());
		sb.append(", fifteenMPacerLaps=");
		sb.append(getFifteenMPacerLaps());
		sb.append(", pacerVo2Max=");
		sb.append(getPacerVo2Max());
		sb.append(", mileRunMinutes=");
		sb.append(getMileRunMinutes());
		sb.append(", mileRunSeconds=");
		sb.append(getMileRunSeconds());
		sb.append(", mileRunVo2Max=");
		sb.append(getMileRunVo2Max());
		sb.append(", walkTestMinutes=");
		sb.append(getWalkTestMinutes());
		sb.append(", walkTestSeconds=");
		sb.append(getWalkTestSeconds());
		sb.append(", walkTestHrBpm=");
		sb.append(getWalkTestHrBpm());
		sb.append(", walkTestVo2Max=");
		sb.append(getWalkTestVo2Max());
		sb.append(", curlUps=");
		sb.append(getCurlUps());
		sb.append(", trunkLiftInches=");
		sb.append(getTrunkLiftInches());
		sb.append(", pushups=");
		sb.append(getPushups());
		sb.append(", modPullUps=");
		sb.append(getModPullUps());
		sb.append(", flexArmHangSeconds=");
		sb.append(getFlexArmHangSeconds());
		sb.append(", sitReachLInches=");
		sb.append(getSitReachLInches());
		sb.append(", sitReachRInches=");
		sb.append(getSitReachRInches());
		sb.append(", shoulderStretchL=");
		sb.append(getShoulderStretchL());
		sb.append(", shoulderStretchR=");
		sb.append(getShoulderStretchR());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(136);

		sb.append("<model><model-name>");
		sb.append("foundation.fitness.portal.service.model.FitnessRecord");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recordId</column-name><column-value><![CDATA[");
		sb.append(getRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teacherUserId</column-name><column-value><![CDATA[");
		sb.append(getTeacherUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>studentFirstName</column-name><column-value><![CDATA[");
		sb.append(getStudentFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>studentLastName</column-name><column-value><![CDATA[");
		sb.append(getStudentLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>studentGender</column-name><column-value><![CDATA[");
		sb.append(getStudentGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>studentId</column-name><column-value><![CDATA[");
		sb.append(getStudentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>studentGrade</column-name><column-value><![CDATA[");
		sb.append(getStudentGrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>studentAge</column-name><column-value><![CDATA[");
		sb.append(getStudentAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testDate</column-name><column-value><![CDATA[");
		sb.append(getTestDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>heightFeet</column-name><column-value><![CDATA[");
		sb.append(getHeightFeet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>heightInches</column-name><column-value><![CDATA[");
		sb.append(getHeightInches());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weight</column-name><column-value><![CDATA[");
		sb.append(getWeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bmi</column-name><column-value><![CDATA[");
		sb.append(getBmi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>triSkinfold</column-name><column-value><![CDATA[");
		sb.append(getTriSkinfold());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>calfSkinfold</column-name><column-value><![CDATA[");
		sb.append(getCalfSkinfold());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentBodyFatCalc</column-name><column-value><![CDATA[");
		sb.append(getPercentBodyFatCalc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentBodyFatEntered</column-name><column-value><![CDATA[");
		sb.append(getPercentBodyFatEntered());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>twentyMPacerLaps</column-name><column-value><![CDATA[");
		sb.append(getTwentyMPacerLaps());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fifteenMPacerLaps</column-name><column-value><![CDATA[");
		sb.append(getFifteenMPacerLaps());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pacerVo2Max</column-name><column-value><![CDATA[");
		sb.append(getPacerVo2Max());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mileRunMinutes</column-name><column-value><![CDATA[");
		sb.append(getMileRunMinutes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mileRunSeconds</column-name><column-value><![CDATA[");
		sb.append(getMileRunSeconds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mileRunVo2Max</column-name><column-value><![CDATA[");
		sb.append(getMileRunVo2Max());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>walkTestMinutes</column-name><column-value><![CDATA[");
		sb.append(getWalkTestMinutes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>walkTestSeconds</column-name><column-value><![CDATA[");
		sb.append(getWalkTestSeconds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>walkTestHrBpm</column-name><column-value><![CDATA[");
		sb.append(getWalkTestHrBpm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>walkTestVo2Max</column-name><column-value><![CDATA[");
		sb.append(getWalkTestVo2Max());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>curlUps</column-name><column-value><![CDATA[");
		sb.append(getCurlUps());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trunkLiftInches</column-name><column-value><![CDATA[");
		sb.append(getTrunkLiftInches());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pushups</column-name><column-value><![CDATA[");
		sb.append(getPushups());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modPullUps</column-name><column-value><![CDATA[");
		sb.append(getModPullUps());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flexArmHangSeconds</column-name><column-value><![CDATA[");
		sb.append(getFlexArmHangSeconds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sitReachLInches</column-name><column-value><![CDATA[");
		sb.append(getSitReachLInches());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sitReachRInches</column-name><column-value><![CDATA[");
		sb.append(getSitReachRInches());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shoulderStretchL</column-name><column-value><![CDATA[");
		sb.append(getShoulderStretchL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shoulderStretchR</column-name><column-value><![CDATA[");
		sb.append(getShoulderStretchR());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = FitnessRecord.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			FitnessRecord.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _recordId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _teacherUserId;
	private String _className;
	private String _studentFirstName;
	private String _studentLastName;
	private String _studentGender;
	private String _studentId;
	private String _studentGrade;
	private int _studentAge;
	private Date _testDate;
	private int _heightFeet;
	private int _heightInches;
	private int _weight;
	private int _bmi;
	private int _triSkinfold;
	private int _calfSkinfold;
	private float _percentBodyFatCalc;
	private float _percentBodyFatEntered;
	private int _twentyMPacerLaps;
	private int _fifteenMPacerLaps;
	private float _pacerVo2Max;
	private int _mileRunMinutes;
	private int _mileRunSeconds;
	private float _mileRunVo2Max;
	private int _walkTestMinutes;
	private int _walkTestSeconds;
	private int _walkTestHrBpm;
	private float _walkTestVo2Max;
	private int _curlUps;
	private int _trunkLiftInches;
	private int _pushups;
	private int _modPullUps;
	private int _flexArmHangSeconds;
	private int _sitReachLInches;
	private int _sitReachRInches;
	private boolean _shoulderStretchL;
	private boolean _shoulderStretchR;
	private long _columnBitmask;
	private FitnessRecord _escapedModel;
}